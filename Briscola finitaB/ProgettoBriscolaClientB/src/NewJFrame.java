
import java.awt.Color;
import java.awt.geom.AffineTransform;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author HP
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    boolean PuoiCliccare;
    javax.swing.JLabel label;
    SocketClient socket;
    String[] cartaGiocata;
    String attendo;
    String[] cartaDalServer;
    int turno;
    boolean cominciaClinet;
    int numlabel;
    boolean ultimaMano;
    int ultimeTreCarte;

    public NewJFrame() throws IOException {
        initComponents();
        socket = new SocketClient("127.0.0.1", 3333);

        socket.IniziaComunicazione();
        socket.Scrivere("gioca");
        String[] carte = socket.leggere().split(";");
        CambiaImagini(1, carte[0]);
        CambiaImagini(2, carte[1]);
        CambiaImagini(3, carte[2]);
        CambiaImagini(7, carte[3]);
        PuoiCliccare = true;
        label = new javax.swing.JLabel();
        turno = 2;
        cartaDalServer = new String[10];
        cominciaClinet = true;
        numlabel = 0;
        ultimaMano = false;
        ultimeTreCarte = 3;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jCarta2 = new javax.swing.JLabel();
        jCarta1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("jButton2");

        jButton3.setText("jButton3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel11.setText("jLabel11");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(101, 255, 50));
        setForeground(new java.awt.Color(102, 255, 102));
        setPreferredSize(new java.awt.Dimension(650, 900));

        jPanel1.setBackground(new java.awt.Color(102, 255, 102));
        jPanel1.setMaximumSize(new java.awt.Dimension(2147483647, 214783647));
        jPanel1.setPreferredSize(new java.awt.Dimension(639, 823));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/carta.png"))); // NOI18N
        jLabel4.setAlignmentX(0.5F);
        jLabel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/carta.png"))); // NOI18N
        jLabel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/carta.png"))); // NOI18N
        jLabel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        jCarta2.setBackground(new java.awt.Color(102, 255, 102));
        jCarta2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCarta2MouseClicked(evt);
            }
        });

        jCarta1.setBackground(new java.awt.Color(102, 255, 102));
        jCarta1.setName(""); // NOI18N
        jCarta1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCarta1MouseClicked(evt);
            }
        });

        jLabel7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/carta.png"))); // NOI18N
        jLabel8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });

        jLabel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.setPreferredSize(new java.awt.Dimension(102, 158));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Player_1.png"))); // NOI18N
        jLabel9.setText("jLabel9");

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Player2.png"))); // NOI18N
        jLabel10.setText("jLabel9");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addGap(19, 19, 19))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jCarta1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jCarta2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(495, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(17, 17, 17)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jCarta2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCarta1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 151, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(72, 72, 72))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(680, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(16, 16, 16)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 875, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        //tutto giusto 
        if (PuoiCliccare) {
            if (ultimaMano == false) {
                if (cominciaClinet == true) {
                    PuoiCliccare = false;
                    socket.Scrivere(jLabel3.getIcon().toString().split("/")[1] + ";6");
                    GiocareCarta(jLabel3, jLabel3.getIcon().toString().split("/")[1]);
                    try {
                        cartaDalServer = socket.leggere().split(";");
                        Invisibile(Integer.parseInt(cartaDalServer[1]));
                        jCarta2.setIcon(new ImageIcon("image/" + cartaDalServer[0]));
                        numlabel = Integer.parseInt(cartaDalServer[1]);
                        cartaDalServer = socket.leggere().split(";");
                        turno = Integer.parseInt(cartaDalServer[0]);
                        CambiaImagini(3, cartaDalServer[1]);
                        jLabel3.setVisible(true);
                        if (turno == 11 || turno == 12) {
                            turno = turno - 10;
                            jLabel7.setVisible(false);
                            jLabel8.setVisible(false);
                            ultimaMano = true;
                        }
                        JOptionPane.showMessageDialog(null, "Turno del Player:" + turno);
                        if (turno == 1) {
                            resetCarte(numlabel);
                            cominciaClinet = false;
                            cartaDalServer = socket.leggere().split(";");
                            Invisibile(Integer.parseInt(cartaDalServer[1]));
                            jCarta2.setIcon(new ImageIcon("image/" + cartaDalServer[0]));
                            numlabel = Integer.parseInt(cartaDalServer[1]);
                            PuoiCliccare = true;
                            turno = 2;
                        } else {
                            resetCarte(numlabel);
                            cominciaClinet = true;
                            PuoiCliccare = true;
                        }
                    } catch (IOException ex) {
                    }

                } else {
                    try {
                        PuoiCliccare = false;
                        GiocareCarta(jLabel3, jLabel3.getIcon().toString().split("/")[1]);
                        socket.Scrivere(jLabel3.getIcon().toString().split("/")[1] + ";6");
                        cartaDalServer = socket.leggere().split(";");
                        turno = Integer.parseInt(cartaDalServer[0]);
                        CambiaImagini(3, cartaDalServer[1]);
                        cominciaClinet = true;
                        jLabel3.setVisible(true);
                        if (turno == 11 || turno == 12) {
                            turno = turno - 10;
                            jLabel7.setVisible(false);
                            jLabel8.setVisible(false);
                            ultimaMano = true;
                        }
                        JOptionPane.showMessageDialog(null, "Turno del Player:" + turno);
                        if (turno == 1) {
                            resetCarte(numlabel);
                            cominciaClinet = false;
                            cartaDalServer = socket.leggere().split(";");
                            Invisibile(Integer.parseInt(cartaDalServer[1]));
                            jCarta2.setIcon(new ImageIcon("image/" + cartaDalServer[0]));
                            numlabel = Integer.parseInt(cartaDalServer[1]);
                            PuoiCliccare = true;
                            turno = 2;
                        } else {
                            resetCarte(numlabel);
                            cominciaClinet = true;
                            PuoiCliccare = true;
                        }
                    } catch (IOException ex) {

                    }
                }
            } else {
                ultimeTreCarte--;
                if (cominciaClinet == true) {
                    PuoiCliccare = false;
                    socket.Scrivere(jLabel3.getIcon().toString().split("/")[1] + ";6");
                    GiocareCarta(jLabel3, jLabel3.getIcon().toString().split("/")[1]);
                    try {
                        cartaDalServer = socket.leggere().split(";");
                    } catch (IOException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Invisibile(Integer.parseInt(cartaDalServer[1]));
                    jCarta2.setIcon(new ImageIcon("image/" + cartaDalServer[0]));
                    numlabel = Integer.parseInt(cartaDalServer[1]);
                    try {
                        cartaDalServer = socket.leggere().split(";");
                    } catch (IOException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    turno = Integer.parseInt(cartaDalServer[0]);
                    JOptionPane.showMessageDialog(null, "Turno del Player:" + turno);
                    if (turno == 1) {
                        resetCarte2(numlabel);
                        cominciaClinet = false;
                        if (ultimeTreCarte > 0) {
                            try {
                                cartaDalServer = socket.leggere().split(";");
                            } catch (IOException ex) {
                                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            Invisibile(Integer.parseInt(cartaDalServer[1]));
                            jCarta2.setIcon(new ImageIcon("image/" + cartaDalServer[0]));
                            numlabel = Integer.parseInt(cartaDalServer[1]);
                        }
                        PuoiCliccare = true;
                        turno = 2;
                    } else {
                        resetCarte2(numlabel);
                        cominciaClinet = true;
                        PuoiCliccare = true;
                    }
                } else {
                    PuoiCliccare = false;
                    GiocareCarta(jLabel3, jLabel3.getIcon().toString().split("/")[1]);
                    socket.Scrivere(jLabel3.getIcon().toString().split("/")[1] + ";6");
                    try {
                        cartaDalServer = socket.leggere().split(";");
                    } catch (IOException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    turno = Integer.parseInt(cartaDalServer[0]);
                    cominciaClinet = true;
                    JOptionPane.showMessageDialog(null, "Turno del Player:" + turno);
                    if (turno == 1) {
                        resetCarte2(numlabel);
                        cominciaClinet = false;
                        if (ultimeTreCarte > 0) {
                            try {
                                cartaDalServer = socket.leggere().split(";");
                            } catch (IOException ex) {
                                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            Invisibile(Integer.parseInt(cartaDalServer[1]));
                            jCarta2.setIcon(new ImageIcon("image/" + cartaDalServer[0]));
                            numlabel = Integer.parseInt(cartaDalServer[1]);
                        }
                        PuoiCliccare = true;
                        turno = 2;
                    } else {
                        resetCarte2(numlabel);
                        cominciaClinet = true;
                        PuoiCliccare = true;
                    }
                }
                if (ultimeTreCarte == 0) {
                    String vincitore = "";
                    try {
                        vincitore = socket.leggere();
                    } catch (IOException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (vincitore.equals("v")) {
                        JOptionPane.showMessageDialog(null, "Ha vintoo il Player 1");
                    } else if (vincitore.equals("s")) {
                        JOptionPane.showMessageDialog(null, "Ha vinto il Player 2");
                    } else {
                        JOptionPane.showMessageDialog(null, "Avete pareggiato");
                    }
                }
            }
        }
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        if (PuoiCliccare) {
            if (ultimaMano == false) {
                if (cominciaClinet == true) {
                    PuoiCliccare = false;
                    socket.Scrivere(jLabel2.getIcon().toString().split("/")[1] + ";5");
                    GiocareCarta(jLabel2, jLabel2.getIcon().toString().split("/")[1]);
                    try {
                        cartaDalServer = socket.leggere().split(";");
                        Invisibile(Integer.parseInt(cartaDalServer[1]));
                        jCarta2.setIcon(new ImageIcon("image/" + cartaDalServer[0]));
                        numlabel = Integer.parseInt(cartaDalServer[1]);
                        cartaDalServer = socket.leggere().split(";");
                        turno = Integer.parseInt(cartaDalServer[0]);
                        CambiaImagini(2, cartaDalServer[1]);
                        jLabel2.setVisible(true);
                        if (turno == 11 || turno == 12) {
                            turno = turno - 10;
                            jLabel7.setVisible(false);
                            jLabel8.setVisible(false);
                            ultimaMano = true;
                        }
                        JOptionPane.showMessageDialog(null, "Turno del Player:" + turno);
                        if (turno == 1) {
                            resetCarte(numlabel);
                            cominciaClinet = false;
                            cartaDalServer = socket.leggere().split(";");
                            Invisibile(Integer.parseInt(cartaDalServer[1]));
                            jCarta2.setIcon(new ImageIcon("image/" + cartaDalServer[0]));
                            numlabel = Integer.parseInt(cartaDalServer[1]);
                            PuoiCliccare = true;
                            turno = 2;
                        } else {
                            resetCarte(numlabel);
                            cominciaClinet = true;
                            PuoiCliccare = true;
                        }
                    } catch (IOException ex) {
                    }

                } else {
                    try {
                        PuoiCliccare = false;
                        GiocareCarta(jLabel2, jLabel2.getIcon().toString().split("/")[1]);
                        socket.Scrivere(jLabel2.getIcon().toString().split("/")[1] + ";5");
                        cartaDalServer = socket.leggere().split(";");
                        turno = Integer.parseInt(cartaDalServer[0]);
                        CambiaImagini(2, cartaDalServer[1]);
                        cominciaClinet = true;
                        jLabel2.setVisible(true);
                        if (turno == 11 || turno == 12) {
                            turno = turno - 10;
                            jLabel7.setVisible(false);
                            jLabel8.setVisible(false);
                            ultimaMano = true;
                        }
                        JOptionPane.showMessageDialog(null, "Turno del Player:" + turno);
                        if (turno == 1) {
                            resetCarte(numlabel);
                            cominciaClinet = false;
                            cartaDalServer = socket.leggere().split(";");
                            Invisibile(Integer.parseInt(cartaDalServer[1]));
                            jCarta2.setIcon(new ImageIcon("image/" + cartaDalServer[0]));
                            numlabel = Integer.parseInt(cartaDalServer[1]);
                            PuoiCliccare = true;
                            turno = 2;
                        } else {
                            resetCarte(numlabel);
                            cominciaClinet = true;
                            PuoiCliccare = true;
                        }
                    } catch (IOException ex) {

                    }
                }
            } else {
                ultimeTreCarte--;
                if (cominciaClinet == true) {
                    PuoiCliccare = false;
                    socket.Scrivere(jLabel2.getIcon().toString().split("/")[1] + ";5");
                    GiocareCarta(jLabel2, jLabel2.getIcon().toString().split("/")[1]);
                    try {
                        cartaDalServer = socket.leggere().split(";");
                    } catch (IOException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Invisibile(Integer.parseInt(cartaDalServer[1]));
                    jCarta2.setIcon(new ImageIcon("image/" + cartaDalServer[0]));
                    numlabel = Integer.parseInt(cartaDalServer[1]);
                    try {
                        cartaDalServer = socket.leggere().split(";");
                    } catch (IOException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    turno = Integer.parseInt(cartaDalServer[0]);
                    JOptionPane.showMessageDialog(null, "Turno del Player:" + turno);
                    if (turno == 1) {
                        resetCarte2(numlabel);
                        cominciaClinet = false;
                        if (ultimeTreCarte > 0) {
                            try {
                                cartaDalServer = socket.leggere().split(";");
                            } catch (IOException ex) {
                                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            Invisibile(Integer.parseInt(cartaDalServer[1]));
                            jCarta2.setIcon(new ImageIcon("image/" + cartaDalServer[0]));
                            numlabel = Integer.parseInt(cartaDalServer[1]);
                        }
                        PuoiCliccare = true;
                        turno = 2;
                    } else {
                        resetCarte2(numlabel);
                        cominciaClinet = true;
                        PuoiCliccare = true;
                    }
                } else {
                    PuoiCliccare = false;
                    GiocareCarta(jLabel2, jLabel2.getIcon().toString().split("/")[1]);
                    socket.Scrivere(jLabel2.getIcon().toString().split("/")[1] + ";5");
                    try {
                        cartaDalServer = socket.leggere().split(";");
                    } catch (IOException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    turno = Integer.parseInt(cartaDalServer[0]);
                    cominciaClinet = true;
                    JOptionPane.showMessageDialog(null, "Turno del Player:" + turno);
                    if (turno == 1) {
                        resetCarte2(numlabel);
                        cominciaClinet = false;
                        if (ultimeTreCarte > 0) {
                            try {
                                cartaDalServer = socket.leggere().split(";");
                            } catch (IOException ex) {
                                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            Invisibile(Integer.parseInt(cartaDalServer[1]));
                            jCarta2.setIcon(new ImageIcon("image/" + cartaDalServer[0]));
                            numlabel = Integer.parseInt(cartaDalServer[1]);
                        }
                        PuoiCliccare = true;
                        turno = 2;
                    } else {
                        resetCarte2(numlabel);
                        cominciaClinet = true;
                        PuoiCliccare = true;
                    }
                }
                if (ultimeTreCarte == 0) {
                    String vincitore = "";
                    try {
                        vincitore = socket.leggere();
                    } catch (IOException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (vincitore.equals("v")) {
                        JOptionPane.showMessageDialog(null, "Ha vinto il Player 1");
                    } else if (vincitore.equals("s")) {
                        JOptionPane.showMessageDialog(null, "Ha vinto il Player 2");
                    } else {
                        JOptionPane.showMessageDialog(null, "Avete pareggiato");
                    }
                }
            }
        }
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        if (PuoiCliccare) {
            if (ultimaMano == false) {
                if (cominciaClinet == true) {
                    PuoiCliccare = false;
                    socket.Scrivere(jLabel1.getIcon().toString().split("/")[1] + ";4");
                    GiocareCarta(jLabel1, jLabel1.getIcon().toString().split("/")[1]);
                    try {
                        cartaDalServer = socket.leggere().split(";");
                        Invisibile(Integer.parseInt(cartaDalServer[1]));
                        jCarta2.setIcon(new ImageIcon("image/" + cartaDalServer[0]));
                        numlabel = Integer.parseInt(cartaDalServer[1]);
                        cartaDalServer = socket.leggere().split(";");
                        turno = Integer.parseInt(cartaDalServer[0]);
                        CambiaImagini(1, cartaDalServer[1]);
                        jLabel1.setVisible(true);
                        if (turno == 11 || turno == 12) {
                            turno = turno - 10;
                            jLabel7.setVisible(false);
                            jLabel8.setVisible(false);
                            ultimaMano = true;
                        }
                        JOptionPane.showMessageDialog(null, "Turno del Player:" + turno);
                        if (turno == 1) {
                            resetCarte(numlabel);
                            cominciaClinet = false;
                            cartaDalServer = socket.leggere().split(";");
                            Invisibile(Integer.parseInt(cartaDalServer[1]));
                            jCarta2.setIcon(new ImageIcon("image/" + cartaDalServer[0]));
                            numlabel = Integer.parseInt(cartaDalServer[1]);
                            PuoiCliccare = true;
                            turno = 2;
                        } else {
                            resetCarte(numlabel);
                            cominciaClinet = true;
                            PuoiCliccare = true;
                        }
                    } catch (IOException ex) {
                    }

                } else {
                    try {
                        PuoiCliccare = false;
                        GiocareCarta(jLabel1, jLabel1.getIcon().toString().split("/")[1]);
                        socket.Scrivere(jLabel1.getIcon().toString().split("/")[1] + ";4");
                        cartaDalServer = socket.leggere().split(";");
                        turno = Integer.parseInt(cartaDalServer[0]);
                        CambiaImagini(1, cartaDalServer[1]);
                        cominciaClinet = true;
                        jLabel1.setVisible(true);
                        if (turno == 11 || turno == 12) {
                            turno = turno - 10;
                            jLabel7.setVisible(false);
                            jLabel8.setVisible(false);
                            ultimaMano = true;
                        }
                        JOptionPane.showMessageDialog(null, "Turno del Player:" + turno);
                        if (turno == 1) {
                            resetCarte(numlabel);
                            cominciaClinet = false;
                            cartaDalServer = socket.leggere().split(";");
                            Invisibile(Integer.parseInt(cartaDalServer[1]));
                            jCarta2.setIcon(new ImageIcon("image/" + cartaDalServer[0]));
                            numlabel = Integer.parseInt(cartaDalServer[1]);
                            PuoiCliccare = true;
                            turno = 2;
                        } else {
                            resetCarte(numlabel);
                            cominciaClinet = true;
                            PuoiCliccare = true;
                        }
                    } catch (IOException ex) {

                    }
                }
            } else {
                ultimeTreCarte--;
                if (cominciaClinet == true) {
                    PuoiCliccare = false;
                    socket.Scrivere(jLabel1.getIcon().toString().split("/")[1] + ";4");
                    GiocareCarta(jLabel1, jLabel1.getIcon().toString().split("/")[1]);
                    try {
                        cartaDalServer = socket.leggere().split(";");
                    } catch (IOException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Invisibile(Integer.parseInt(cartaDalServer[1]));
                    jCarta2.setIcon(new ImageIcon("image/" + cartaDalServer[0]));
                    numlabel = Integer.parseInt(cartaDalServer[1]);
                    try {
                        cartaDalServer = socket.leggere().split(";");
                    } catch (IOException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    turno = Integer.parseInt(cartaDalServer[0]);
                    JOptionPane.showMessageDialog(null, "Turno del Player:" + turno);
                    if (turno == 1) {
                        resetCarte2(numlabel);
                        cominciaClinet = false;
                        if (ultimeTreCarte > 0) {
                            try {
                                cartaDalServer = socket.leggere().split(";");
                            } catch (IOException ex) {
                                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            Invisibile(Integer.parseInt(cartaDalServer[1]));
                            jCarta2.setIcon(new ImageIcon("image/" + cartaDalServer[0]));
                            numlabel = Integer.parseInt(cartaDalServer[1]);
                        }
                        PuoiCliccare = true;
                        turno = 2;
                    } else {
                        resetCarte2(numlabel);
                        cominciaClinet = true;
                        PuoiCliccare = true;
                    }
                } else {
                    PuoiCliccare = false;
                    GiocareCarta(jLabel1, jLabel1.getIcon().toString().split("/")[1]);
                    socket.Scrivere(jLabel1.getIcon().toString().split("/")[1] + ";4");
                    try {
                        cartaDalServer = socket.leggere().split(";");
                    } catch (IOException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    turno = Integer.parseInt(cartaDalServer[0]);
                    cominciaClinet = true;
                    JOptionPane.showMessageDialog(null, "Turno del Player:" + turno);
                    if (turno == 1) {
                        resetCarte2(numlabel);
                        cominciaClinet = false;
                        if (ultimeTreCarte > 0) {
                            try {
                                cartaDalServer = socket.leggere().split(";");
                            } catch (IOException ex) {
                                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            Invisibile(Integer.parseInt(cartaDalServer[1]));
                            jCarta2.setIcon(new ImageIcon("image/" + cartaDalServer[0]));
                            numlabel = Integer.parseInt(cartaDalServer[1]);
                        }
                        PuoiCliccare = true;
                        turno = 2;
                    } else {
                        resetCarte2(numlabel);
                        cominciaClinet = true;
                        PuoiCliccare = true;
                    }
                }
                if (ultimeTreCarte == 0) {
                    String vincitore = "";
                    try {
                        vincitore = socket.leggere();
                    } catch (IOException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (vincitore.equals("v")) {
                        JOptionPane.showMessageDialog(null, "Ha vinto il Player 1");
                    } else if (vincitore.equals("s")) {
                        JOptionPane.showMessageDialog(null, "Ha vinto il Player 2");
                    } else {
                        JOptionPane.showMessageDialog(null, "Avete pareggiato");
                    }
                }
            }
        }
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked

    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked

    }//GEN-LAST:event_jLabel5MouseClicked

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jLabel7MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCarta1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCarta1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jCarta1MouseClicked

    private void jCarta2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCarta2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jCarta2MouseClicked

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        // TODO add your handling code here:
        /*  if (bri.getPlayerturno() == 2) {
            clickCarte++;
            if (clickCarte == 1) {
                CarteClick[0] = jLabel6.getIcon().toString().split("/")[1];
                bri.setPlayerturno(1);
                label[0] = jLabel6;
            } else {
                CarteClick[1] = jLabel6.getIcon().toString().split("/")[1];
                bri.ConfrontoTradueCarte(new JCarta(CarteClick[0]), new JCarta(CarteClick[1]));
                clickCarte = 0;
                label[1] = jLabel6;
                CambiaImagini(label);
            }
        }*/
    }//GEN-LAST:event_jLabel6MouseClicked

    private void CambiaImagini(int l, String imag) {
        switch (l) {
            case 1:
                jLabel1.setIcon(new ImageIcon("image/" + imag));
                break;
            case 2:
                jLabel2.setIcon(new ImageIcon("image/" + imag));
                break;
            case 3:
                jLabel3.setIcon(new ImageIcon("image/" + imag));
                break;
            case 4:
                jLabel4.setIcon(new ImageIcon("image/" + imag));
                break;
            case 5:
                jLabel5.setIcon(new ImageIcon("image/" + imag));
                break;
            case 6:
                jLabel6.setIcon(new ImageIcon("image/" + imag));
                break;
            case 7:
                jLabel7.setIcon(new ImageIcon("image/" + imag));
                break;

        }

    }

    private void Invisibile(int l) {
        switch (l) {
            case 1:
                jLabel1.setIcon(new ImageIcon(""));
                break;
            case 2:
                jLabel2.setIcon(new ImageIcon(""));
                break;
            case 3:
                jLabel3.setIcon(new ImageIcon(""));
                break;
            case 4:
                jLabel4.setIcon(new ImageIcon(""));
                break;
            case 5:
                jLabel5.setIcon(new ImageIcon(""));
                break;
            case 6:
                jLabel6.setIcon(new ImageIcon(""));
                break;
            case 7:
                jLabel7.setIcon(new ImageIcon(""));
                break;
            case 8:
                jCarta1.setVisible(false);
                break;
            case 9:
                jCarta2.setVisible(false);
                break;

        }
    }

    private synchronized void GiocareCarta(javax.swing.JLabel l, String image) {
        l.setVisible(false);
        jCarta1.setIcon(new ImageIcon("image/" + image));
    }

    private void resetCarte(int l) {

        switch (l) {
            case 4:
                jLabel4.setIcon(new ImageIcon("image/carta.png"));
                break;
            case 5:
                jLabel5.setIcon(new ImageIcon("image/carta.png"));
                break;
            case 6:
                jLabel6.setIcon(new ImageIcon("image/carta.png"));
                break;
            case 7:
                jLabel7.setIcon(new ImageIcon("image/carta.png"));
                break;
        }
        jCarta1.setIcon(new ImageIcon(""));
        jCarta2.setIcon(new ImageIcon(""));
    }

    private void resetCarte2(int l) {

        switch (l) {
            case 4:
                jLabel4.setIcon(new ImageIcon(" "));
                break;
            case 5:
                jLabel5.setIcon(new ImageIcon(" "));
                break;
            case 6:
                jLabel6.setIcon(new ImageIcon(" "));
                break;
            case 7:
                jLabel7.setIcon(new ImageIcon(" "));
                break;
        }
        jCarta1.setIcon(new ImageIcon(""));
        jCarta2.setIcon(new ImageIcon(""));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                try {
                    new NewJFrame().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jCarta1;
    private javax.swing.JLabel jCarta2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
