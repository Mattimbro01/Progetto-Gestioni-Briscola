
import java.awt.geom.AffineTransform;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author HP
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    Briscola bri;
    boolean PuoiCliccare;
    javax.swing.JLabel label;
    String mex;
    SocketServer socket;
    String[] cartaDalClient;
    boolean cominciaServer;
    boolean primoTurno;
    int numlabel;
    int ultimeTreCarte;
    String ultima;
    boolean ultimaMano;

    public NewJFrame() throws IOException {
        initComponents();
        cartaDalClient = new String[2];
        try {
            bri = new Briscola();
            socket = new SocketServer(3333);
            socket.IniziaComunicazione();
        } catch (Exception e) {
        }
        String[] d = bri.DistribuisciTreCarte();
        String[] d2 = bri.DistribuisciTreCarte();
        ultima = bri.getUltimaCarta();
        jLabel1.setIcon(new ImageIcon("image/" + d[0])); // NOI18N
        jLabel2.setIcon(new ImageIcon("image/" + d[1])); // NOI18N
        jLabel3.setIcon(new ImageIcon("image/" + d[2])); // NOI18N*/
        socket.leggere();
        mex = CocanenareStringhe(d2) + ";" + ultima;
        socket.Scrivere(mex);
        jLabel7.setIcon(new ImageIcon("image/" + ultima));
        label = new javax.swing.JLabel();
        PuoiCliccare = true;
        cominciaServer = false;
        primoTurno = true;
        numlabel = 0;
        ultimeTreCarte = 3;
        ultimaMano = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jCarta2 = new javax.swing.JLabel();
        jCarta1 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        jButton3.setText("jButton3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(650, 870));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(102, 255, 102));
        jPanel1.setPreferredSize(new java.awt.Dimension(639, 823));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/carta.png"))); // NOI18N
        jLabel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/carta.png"))); // NOI18N
        jLabel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/carta.png"))); // NOI18N
        jLabel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel4.setRequestFocusEnabled(false);
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        jLabel7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });

        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/carta.png"))); // NOI18N
        jLabel8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Player2.png"))); // NOI18N
        jLabel11.setPreferredSize(new java.awt.Dimension(162, 124));

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Player_1.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCarta2)
                                    .addComponent(jCarta1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(72, 72, 72)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(42, 42, 42))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(140, 140, 140))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jCarta2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jCarta1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(69, 69, 69))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(24, 24, 24))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 662, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 834, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        // TODO add your handling code here:
        if (PuoiCliccare) {
            if (ultimaMano == false) {
                if (cominciaServer == true) {//hgi
                    try {
                        PuoiCliccare = false;
                        socket.Scrivere(jLabel3.getIcon().toString().split("/")[1] + ";6");
                        GiocareCarta(jLabel3, jLabel3.getIcon().toString().split("/")[1]);
                        cartaDalClient = socket.leggere().split(";");
                        // CambiaImagini(Integer.parseInt(cartaDalClient[1]), cartaDalClient[0]);
                        jCarta2.setIcon(new ImageIcon("image/" + cartaDalClient[0]));
                        Invisibile(Integer.parseInt(cartaDalClient[1]));
                        numlabel = Integer.parseInt(cartaDalClient[1]);
                        bri.ConfrontoTradueCarte(new JCarta(jLabel3.getIcon().toString().split("/")[1]), new JCarta(cartaDalClient[0]));
                        JOptionPane.showMessageDialog(null, "Turnoo del Player:" + bri.getPlayerturno());
                        jLabel3.setVisible(true);
                        if (bri.getPlayerturno() == 2) {
                            resetCarte(numlabel);
                            String[] carte = new String[2];
                            carte[0] = bri.DistribuisciUnaCarta();
                            carte[1] = bri.DistribuisciUnaCarta();
                            CambiaImagini(3, carte[1]);
                            if (carte[0].equals(ultima) || carte[1].equals(ultima)) {
                                jLabel8.setVisible(false);
                                jLabel7.setVisible(false);
                                ultimaMano = true;
                                socket.Scrivere(12 + ";" + carte[0]);
                            } else {
                                socket.Scrivere(bri.getPlayerturno() + ";" + carte[0]);
                            }
                            try {
                                cominciaServer = false;
                                cartaDalClient = socket.leggere().split(";");
                                jCarta2.setIcon(new ImageIcon("image/" + cartaDalClient[0]));
                                numlabel = Integer.parseInt(cartaDalClient[1]);
                                PuoiCliccare = true;
                            } catch (IOException ex) {
                            }
                        } else {
                            resetCarte(numlabel);
                            String[] carte = new String[2];
                            carte[0] = bri.DistribuisciUnaCarta();
                            carte[1] = bri.DistribuisciUnaCarta();
                            CambiaImagini(3, carte[0]);
                            if (carte[0].equals(ultima) || carte[1].equals(ultima)) {
                                jLabel8.setVisible(false);
                                jLabel7.setVisible(false);
                                ultimaMano = true;
                                socket.Scrivere(11 + ";" + carte[1]);
                            } else {
                                socket.Scrivere(bri.getPlayerturno() + ";" + carte[1]);
                            }
                            cominciaServer = true;
                            PuoiCliccare = true;
                        }
                    } catch (IOException ex) {
                    }//giusto
                } else {
                    /**
                     * *****************************
                     */
                    PuoiCliccare = false;
                    if (primoTurno == true) {
                        socket.Scrivere(jLabel3.getIcon().toString().split("/")[1] + ";6");
                        GiocareCarta(jLabel3, jLabel3.getIcon().toString().split("/")[1]);
                        bri.ConfrontoTradueCarte(new JCarta(jLabel3.getIcon().toString().split("/")[1]), new JCarta(cartaDalClient[0]));
                        JOptionPane.showMessageDialog(null, "Turnoo del Player:" + bri.getPlayerturno());
                        jLabel3.setVisible(true);
                        if (bri.getPlayerturno() == 2) {
                            resetCarte(numlabel);
                            String[] carte = new String[2];
                            carte[0] = bri.DistribuisciUnaCarta();
                            carte[1] = bri.DistribuisciUnaCarta();
                            CambiaImagini(3, carte[1]);
                            socket.Scrivere(bri.getPlayerturno() + ";" + carte[0]);
                            try {
                                cominciaServer = false;
                                cartaDalClient = socket.leggere().split(";");
                                //CambiaImagini(Integer.parseInt(cartaDalClient[1]), cartaDalClient[0]);
                                jCarta2.setIcon(new ImageIcon("image/" + cartaDalClient[0]));
                                numlabel = Integer.parseInt(cartaDalClient[1]);
                                PuoiCliccare = true;
                            } catch (IOException ex) {
                            }
                        } else {
                            resetCarte(numlabel);
                            CambiaImagini(3, bri.DistribuisciUnaCarta());
                            socket.Scrivere(bri.getPlayerturno() + ";" + bri.DistribuisciUnaCarta());
                            cominciaServer = true;
                            PuoiCliccare = true;
                        }
                        primoTurno = false;
                        /**
                         * **********************************************
                         */
                    } else {
                        socket.Scrivere(jLabel3.getIcon().toString().split("/")[1] + ";6");
                        GiocareCarta(jLabel3, jLabel3.getIcon().toString().split("/")[1]);
                        bri.ConfrontoTradueCarte(new JCarta(jLabel3.getIcon().toString().split("/")[1]), new JCarta(cartaDalClient[0]));
                        JOptionPane.showMessageDialog(null, "Turnoo del Player:" + bri.getPlayerturno());
                        jLabel3.setVisible(true);
                        if (bri.getPlayerturno() == 2) {
                            resetCarte(numlabel);
                            String[] carte = new String[2];
                            carte[0] = bri.DistribuisciUnaCarta();
                            carte[1] = bri.DistribuisciUnaCarta();
                            CambiaImagini(3, carte[1]);
                            if (carte[0].equals(ultima) || carte[1].equals(ultima)) {
                                jLabel8.setVisible(false);
                                jLabel7.setVisible(false);
                                ultimaMano = true;
                                socket.Scrivere(12 + ";" + carte[0]);
                            } else {
                                socket.Scrivere(bri.getPlayerturno() + ";" + carte[0]);
                            }
                            try {
                                cominciaServer = false;
                                cartaDalClient = socket.leggere().split(";");
                                //CambiaImagini(Integer.parseInt(cartaDalClient[1]), cartaDalClient[0]);
                                jCarta2.setIcon(new ImageIcon("image/" + cartaDalClient[0]));
                                numlabel = Integer.parseInt(cartaDalClient[1]);
                                PuoiCliccare = true;
                            } catch (IOException ex) {
                            }
                        } else {
                            resetCarte(numlabel);
                            String[] carte = new String[2];
                            carte[0] = bri.DistribuisciUnaCarta();
                            carte[1] = bri.DistribuisciUnaCarta();
                            CambiaImagini(3, carte[0]);
                            if (carte[0].equals(ultima) || carte[1].equals(ultima)) {
                                jLabel8.setVisible(false);
                                jLabel7.setVisible(false);
                                ultimaMano = true;
                                socket.Scrivere(11 + ";" + carte[1]);
                            } else {
                                socket.Scrivere(bri.getPlayerturno() + ";" + carte[1]);
                            }
                            cominciaServer = true;
                            PuoiCliccare = true;
                        }
                    }
                }//
            } else {
                ultimeTreCarte--;
                if (cominciaServer == true) {
                    PuoiCliccare = false;
                    socket.Scrivere(jLabel3.getIcon().toString().split("/")[1] + ";6");
                    GiocareCarta(jLabel3, jLabel3.getIcon().toString().split("/")[1]);
                    try {
                        cartaDalClient = socket.leggere().split(";");
                    } catch (IOException ex) {
                    }
                    // CambiaImagini(Integer.parseInt(cartaDalClient[1]), cartaDalClient[0]);
                    jCarta2.setIcon(new ImageIcon("image/" + cartaDalClient[0]));
                    Invisibile(Integer.parseInt(cartaDalClient[1]));
                    numlabel = Integer.parseInt(cartaDalClient[1]);
                    bri.ConfrontoTradueCarte(new JCarta(jLabel3.getIcon().toString().split("/")[1]), new JCarta(cartaDalClient[0]));
                    JOptionPane.showMessageDialog(null, "Turnoo del Player:" + bri.getPlayerturno());
                    jLabel3.setVisible(true);
                    if (bri.getPlayerturno() == 2) {
                        resetCarte2(numlabel);
                        CambiaImagini(3, "");
                        socket.Scrivere(bri.getPlayerturno() + "");
                        if (ultimeTreCarte > 0) {
                            try {
                                cominciaServer = false;
                                cartaDalClient = socket.leggere().split(";");
                                jCarta2.setIcon(new ImageIcon("image/" + cartaDalClient[0]));
                                numlabel = Integer.parseInt(cartaDalClient[1]);

                            } catch (IOException ex) {
                            }
                        }
                        PuoiCliccare = true;
                    } else {
                        resetCarte2(numlabel);
                        CambiaImagini(3, "");
                        socket.Scrivere(bri.getPlayerturno() + "");
                        cominciaServer = true;
                        PuoiCliccare = true;
                    }
                } else {
                    PuoiCliccare = false;
                    socket.Scrivere(jLabel3.getIcon().toString().split("/")[1] + ";6");
                    GiocareCarta(jLabel3, jLabel3.getIcon().toString().split("/")[1]);
                    bri.ConfrontoTradueCarte(new JCarta(jLabel3.getIcon().toString().split("/")[1]), new JCarta(cartaDalClient[0]));
                    JOptionPane.showMessageDialog(null, "Turnoo del Player:" + bri.getPlayerturno());
                    jLabel3.setVisible(true);
                    if (bri.getPlayerturno() == 2) {
                        resetCarte2(numlabel);
                        CambiaImagini(3, "");
                        socket.Scrivere(bri.getPlayerturno() + "");
                        if (ultimeTreCarte > 0) {
                            try {
                                cominciaServer = false;
                                cartaDalClient = socket.leggere().split(";");
                                //CambiaImagini(Integer.parseInt(cartaDalClient[1]), cartaDalClient[0]);
                                jCarta2.setIcon(new ImageIcon("image/" + cartaDalClient[0]));
                                numlabel = Integer.parseInt(cartaDalClient[1]);

                            } catch (IOException ex) {
                            }
                        }
                        PuoiCliccare = true;
                    } else {
                        resetCarte2(numlabel);
                        CambiaImagini(3, "");
                        socket.Scrivere(bri.getPlayerturno() + "");
                        cominciaServer = true;
                        PuoiCliccare = true;
                    }

                }
                if (ultimeTreCarte == 0) {
                    int player = bri.Vincitore();
                    if (player == 1) {
                        socket.Scrivere("v");
                        JOptionPane.showMessageDialog(null, "Ha vintoo il Player 1");
                    } else if (player == 2) {
                        socket.Scrivere("s");
                        JOptionPane.showMessageDialog(null, "Ha vintoo il Player 2");
                    } else {
                        socket.Scrivere("p");
                        JOptionPane.showMessageDialog(null, "Avete pareggiatoo");
                    }
                }
            }//
        }


    }//GEN-LAST:event_jLabel3MouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        if (PuoiCliccare) {
            if (ultimaMano == false) {
                if (cominciaServer == true) {//hgi
                    try {
                        PuoiCliccare = false;
                        socket.Scrivere(jLabel2.getIcon().toString().split("/")[1] + ";5");
                        GiocareCarta(jLabel2, jLabel2.getIcon().toString().split("/")[1]);
                        cartaDalClient = socket.leggere().split(";");
                        // CambiaImagini(Integer.parseInt(cartaDalClient[1]), cartaDalClient[0]);
                        jCarta2.setIcon(new ImageIcon("image/" + cartaDalClient[0]));
                        Invisibile(Integer.parseInt(cartaDalClient[1]));
                        numlabel = Integer.parseInt(cartaDalClient[1]);
                        bri.ConfrontoTradueCarte(new JCarta(jLabel2.getIcon().toString().split("/")[1]), new JCarta(cartaDalClient[0]));
                        JOptionPane.showMessageDialog(null, "Turnoo del Player:" + bri.getPlayerturno());
                        jLabel2.setVisible(true);
                        if (bri.getPlayerturno() == 2) {
                            resetCarte(numlabel);
                            String[] carte = new String[2];
                            carte[0] = bri.DistribuisciUnaCarta();
                            carte[1] = bri.DistribuisciUnaCarta();
                            CambiaImagini(2, carte[1]);
                            if (carte[0].equals(ultima) || carte[1].equals(ultima)) {
                                jLabel8.setVisible(false);
                                jLabel7.setVisible(false);
                                ultimaMano = true;
                                socket.Scrivere(12 + ";" + carte[0]);
                            } else {
                                socket.Scrivere(bri.getPlayerturno() + ";" + carte[0]);
                            }
                            try {
                                cominciaServer = false;
                                cartaDalClient = socket.leggere().split(";");
                                jCarta2.setIcon(new ImageIcon("image/" + cartaDalClient[0]));
                                numlabel = Integer.parseInt(cartaDalClient[1]);
                                PuoiCliccare = true;
                            } catch (IOException ex) {
                            }
                        } else {
                            resetCarte(numlabel);
                            String[] carte = new String[2];
                            carte[0] = bri.DistribuisciUnaCarta();
                            carte[1] = bri.DistribuisciUnaCarta();
                            CambiaImagini(2, carte[0]);
                            if (carte[0].equals(ultima) || carte[1].equals(ultima)) {
                                jLabel8.setVisible(false);
                                jLabel7.setVisible(false);
                                ultimaMano = true;
                                socket.Scrivere(11 + ";" + carte[1]);
                            } else {
                                socket.Scrivere(bri.getPlayerturno() + ";" + carte[1]);
                            }
                            cominciaServer = true;
                            PuoiCliccare = true;
                        }
                    } catch (IOException ex) {
                    }//giusto
                } else {
                    /**
                     * *****************************
                     */
                    PuoiCliccare = false;
                    if (primoTurno == true) {
                        socket.Scrivere(jLabel2.getIcon().toString().split("/")[1] + ";5");
                        GiocareCarta(jLabel2, jLabel2.getIcon().toString().split("/")[1]);
                        bri.ConfrontoTradueCarte(new JCarta(jLabel2.getIcon().toString().split("/")[1]), new JCarta(cartaDalClient[0]));
                        JOptionPane.showMessageDialog(null, "Turnoo del Player:" + bri.getPlayerturno());
                        jLabel2.setVisible(true);
                        if (bri.getPlayerturno() == 2) {
                            resetCarte(numlabel);
                            String[] carte = new String[2];
                            carte[0] = bri.DistribuisciUnaCarta();
                            carte[1] = bri.DistribuisciUnaCarta();
                            CambiaImagini(2, carte[1]);
                            socket.Scrivere(bri.getPlayerturno() + ";" + carte[0]);
                            try {
                                cominciaServer = false;
                                cartaDalClient = socket.leggere().split(";");
                                //CambiaImagini(Integer.parseInt(cartaDalClient[1]), cartaDalClient[0]);
                                jCarta2.setIcon(new ImageIcon("image/" + cartaDalClient[0]));
                                numlabel = Integer.parseInt(cartaDalClient[1]);
                                PuoiCliccare = true;
                            } catch (IOException ex) {
                            }
                        } else {
                            resetCarte(numlabel);
                            CambiaImagini(2, bri.DistribuisciUnaCarta());
                            socket.Scrivere(bri.getPlayerturno() + ";" + bri.DistribuisciUnaCarta());
                            cominciaServer = true;
                            PuoiCliccare = true;
                        }
                        primoTurno = false;
                        /**
                         * **********************************************
                         */
                    } else {
                        socket.Scrivere(jLabel2.getIcon().toString().split("/")[1] + ";5");
                        GiocareCarta(jLabel2, jLabel2.getIcon().toString().split("/")[1]);
                        bri.ConfrontoTradueCarte(new JCarta(jLabel2.getIcon().toString().split("/")[1]), new JCarta(cartaDalClient[0]));
                        JOptionPane.showMessageDialog(null, "Turnoo del Player:" + bri.getPlayerturno());
                        jLabel2.setVisible(true);
                        if (bri.getPlayerturno() == 2) {
                            resetCarte(numlabel);
                            String[] carte = new String[2];
                            carte[0] = bri.DistribuisciUnaCarta();
                            carte[1] = bri.DistribuisciUnaCarta();
                            CambiaImagini(2, carte[1]);
                            if (carte[0].equals(ultima) || carte[1].equals(ultima)) {
                                jLabel8.setVisible(false);
                                jLabel7.setVisible(false);
                                ultimaMano = true;
                                socket.Scrivere(12 + ";" + carte[0]);
                            } else {
                                socket.Scrivere(bri.getPlayerturno() + ";" + carte[0]);
                            }
                            try {
                                cominciaServer = false;
                                cartaDalClient = socket.leggere().split(";");
                                //CambiaImagini(Integer.parseInt(cartaDalClient[1]), cartaDalClient[0]);
                                jCarta2.setIcon(new ImageIcon("image/" + cartaDalClient[0]));
                                numlabel = Integer.parseInt(cartaDalClient[1]);
                                PuoiCliccare = true;
                            } catch (IOException ex) {
                            }
                        } else {
                            resetCarte(numlabel);
                            String[] carte = new String[2];
                            carte[0] = bri.DistribuisciUnaCarta();
                            carte[1] = bri.DistribuisciUnaCarta();
                            CambiaImagini(2, carte[0]);
                            if (carte[0].equals(ultima) || carte[1].equals(ultima)) {
                                jLabel8.setVisible(false);
                                jLabel7.setVisible(false);
                                ultimaMano = true;
                                socket.Scrivere(11 + ";" + carte[1]);
                            } else {
                                socket.Scrivere(bri.getPlayerturno() + ";" + carte[1]);
                            }
                            cominciaServer = true;
                            PuoiCliccare = true;
                        }
                    }
                }//
            } else {
                ultimeTreCarte--;
                if (cominciaServer == true) {
                    PuoiCliccare = false;
                    socket.Scrivere(jLabel2.getIcon().toString().split("/")[1] + ";5");
                    GiocareCarta(jLabel2, jLabel2.getIcon().toString().split("/")[1]);
                    try {
                        cartaDalClient = socket.leggere().split(";");
                    } catch (IOException ex) {
                    }
                    // CambiaImagini(Integer.parseInt(cartaDalClient[1]), cartaDalClient[0]);
                    jCarta2.setIcon(new ImageIcon("image/" + cartaDalClient[0]));
                    Invisibile(Integer.parseInt(cartaDalClient[1]));
                    numlabel = Integer.parseInt(cartaDalClient[1]);
                    bri.ConfrontoTradueCarte(new JCarta(jLabel2.getIcon().toString().split("/")[1]), new JCarta(cartaDalClient[0]));
                    JOptionPane.showMessageDialog(null, "Turnoo del Player:" + bri.getPlayerturno());
                    jLabel2.setVisible(true);
                    if (bri.getPlayerturno() == 2) {
                        resetCarte2(numlabel);
                        CambiaImagini(2, "");
                        socket.Scrivere(bri.getPlayerturno() + "");
                        if (ultimeTreCarte > 0) {
                            try {
                                cominciaServer = false;
                                cartaDalClient = socket.leggere().split(";");
                                jCarta2.setIcon(new ImageIcon("image/" + cartaDalClient[0]));
                                numlabel = Integer.parseInt(cartaDalClient[1]);

                            } catch (IOException ex) {
                            }
                        }
                        PuoiCliccare = true;
                    } else {
                        resetCarte2(numlabel);
                        CambiaImagini(2, "");
                        socket.Scrivere(bri.getPlayerturno() + "");
                        cominciaServer = true;
                        PuoiCliccare = true;
                    }
                } else {
                    PuoiCliccare = false;
                    socket.Scrivere(jLabel2.getIcon().toString().split("/")[1] + ";5");
                    GiocareCarta(jLabel2, jLabel2.getIcon().toString().split("/")[1]);
                    bri.ConfrontoTradueCarte(new JCarta(jLabel2.getIcon().toString().split("/")[1]), new JCarta(cartaDalClient[0]));
                    JOptionPane.showMessageDialog(null, "Turnoo del Player:" + bri.getPlayerturno());
                    jLabel2.setVisible(true);
                    if (bri.getPlayerturno() == 2) {
                        resetCarte2(numlabel);
                        CambiaImagini(2, "");
                        socket.Scrivere(bri.getPlayerturno() + "");
                        if (ultimeTreCarte > 0) {
                            try {
                                cominciaServer = false;
                                cartaDalClient = socket.leggere().split(";");
                                //CambiaImagini(Integer.parseInt(cartaDalClient[1]), cartaDalClient[0]);
                                jCarta2.setIcon(new ImageIcon("image/" + cartaDalClient[0]));
                                numlabel = Integer.parseInt(cartaDalClient[1]);

                            } catch (IOException ex) {
                            }
                        }
                        PuoiCliccare = true;
                    } else {
                        resetCarte2(numlabel);
                        CambiaImagini(2, "");
                        socket.Scrivere(bri.getPlayerturno() + "");
                        cominciaServer = true;
                        PuoiCliccare = true;
                    }

                }
                if (ultimeTreCarte == 0) {
                    int player = bri.Vincitore();
                    if (player == 1) {
                        socket.Scrivere("v");
                        JOptionPane.showMessageDialog(null, "Ha vintoo il Player 1");
                    } else if (player == 2) {
                        socket.Scrivere("s");
                        JOptionPane.showMessageDialog(null, "Ha vintoo il Player 2");
                    } else {
                        socket.Scrivere("p");
                        JOptionPane.showMessageDialog(null, "Avete pareggiatoo");
                    }
                }
            }//

        }
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        if (PuoiCliccare) {
            if (ultimaMano == false) {
                if (cominciaServer == true) {//hgi
                    try {
                        PuoiCliccare = false;
                        socket.Scrivere(jLabel1.getIcon().toString().split("/")[1] + ";4");
                        GiocareCarta(jLabel1, jLabel1.getIcon().toString().split("/")[1]);
                        cartaDalClient = socket.leggere().split(";");
                        // CambiaImagini(Integer.parseInt(cartaDalClient[1]), cartaDalClient[0]);
                        jCarta2.setIcon(new ImageIcon("image/" + cartaDalClient[0]));
                        Invisibile(Integer.parseInt(cartaDalClient[1]));
                        numlabel = Integer.parseInt(cartaDalClient[1]);
                        bri.ConfrontoTradueCarte(new JCarta(jLabel1.getIcon().toString().split("/")[1]), new JCarta(cartaDalClient[0]));
                        JOptionPane.showMessageDialog(null, "Turnoo del Player:" + bri.getPlayerturno());
                        jLabel1.setVisible(true);
                        if (bri.getPlayerturno() == 2) {
                            resetCarte(numlabel);
                            String[] carte = new String[2];
                            carte[0] = bri.DistribuisciUnaCarta();
                            carte[1] = bri.DistribuisciUnaCarta();
                            CambiaImagini(1, carte[1]);
                            if (carte[0].equals(ultima) || carte[1].equals(ultima)) {
                                jLabel8.setVisible(false);
                                jLabel7.setVisible(false);
                                ultimaMano = true;
                                socket.Scrivere(12 + ";" + carte[0]);
                            } else {
                                socket.Scrivere(bri.getPlayerturno() + ";" + carte[0]);
                            }
                            try {
                                cominciaServer = false;
                                cartaDalClient = socket.leggere().split(";");
                                jCarta2.setIcon(new ImageIcon("image/" + cartaDalClient[0]));
                                numlabel = Integer.parseInt(cartaDalClient[1]);
                                PuoiCliccare = true;
                            } catch (IOException ex) {
                            }
                        } else {
                            resetCarte(numlabel);
                            String[] carte = new String[2];
                            carte[0] = bri.DistribuisciUnaCarta();
                            carte[1] = bri.DistribuisciUnaCarta();
                            CambiaImagini(1, carte[0]);
                            if (carte[0].equals(ultima) || carte[1].equals(ultima)) {
                                jLabel8.setVisible(false);
                                jLabel7.setVisible(false);
                                ultimaMano = true;
                                socket.Scrivere(11 + ";" + carte[1]);
                            } else {
                                socket.Scrivere(bri.getPlayerturno() + ";" + carte[1]);
                            }
                            cominciaServer = true;
                            PuoiCliccare = true;
                        }
                    } catch (IOException ex) {
                    }//giusto
                } else {
                    /**
                     * *****************************
                     */
                    PuoiCliccare = false;
                    if (primoTurno == true) {
                        socket.Scrivere(jLabel1.getIcon().toString().split("/")[1] + ";4");
                        GiocareCarta(jLabel1, jLabel1.getIcon().toString().split("/")[1]);
                        bri.ConfrontoTradueCarte(new JCarta(jLabel1.getIcon().toString().split("/")[1]), new JCarta(cartaDalClient[0]));
                        JOptionPane.showMessageDialog(null, "Turnoo del Player:" + bri.getPlayerturno());
                        jLabel1.setVisible(true);
                        if (bri.getPlayerturno() == 2) {
                            resetCarte(numlabel);
                            String[] carte = new String[2];
                            carte[0] = bri.DistribuisciUnaCarta();
                            carte[1] = bri.DistribuisciUnaCarta();
                            CambiaImagini(1, carte[1]);
                            socket.Scrivere(bri.getPlayerturno() + ";" + carte[0]);
                            try {
                                cominciaServer = false;
                                cartaDalClient = socket.leggere().split(";");
                                //CambiaImagini(Integer.parseInt(cartaDalClient[1]), cartaDalClient[0]);
                                jCarta2.setIcon(new ImageIcon("image/" + cartaDalClient[0]));
                                numlabel = Integer.parseInt(cartaDalClient[1]);
                                PuoiCliccare = true;
                            } catch (IOException ex) {
                            }
                        } else {
                            resetCarte(numlabel);
                            CambiaImagini(1, bri.DistribuisciUnaCarta());
                            socket.Scrivere(bri.getPlayerturno() + ";" + bri.DistribuisciUnaCarta());
                            cominciaServer = true;
                            PuoiCliccare = true;
                        }
                        primoTurno = false;
                        /**
                         * **********************************************
                         */
                    } else {
                        socket.Scrivere(jLabel1.getIcon().toString().split("/")[1] + ";4");
                        GiocareCarta(jLabel1, jLabel1.getIcon().toString().split("/")[1]);
                        bri.ConfrontoTradueCarte(new JCarta(jLabel1.getIcon().toString().split("/")[1]), new JCarta(cartaDalClient[0]));
                        JOptionPane.showMessageDialog(null, "Turnoo del Player:" + bri.getPlayerturno());
                        jLabel1.setVisible(true);
                        if (bri.getPlayerturno() == 2) {
                            resetCarte(numlabel);
                            String[] carte = new String[2];
                            carte[0] = bri.DistribuisciUnaCarta();
                            carte[1] = bri.DistribuisciUnaCarta();
                            CambiaImagini(1, carte[1]);
                            if (carte[0].equals(ultima) || carte[1].equals(ultima)) {
                                jLabel8.setVisible(false);
                                jLabel7.setVisible(false);
                                ultimaMano = true;
                                socket.Scrivere(12 + ";" + carte[0]);
                            } else {
                                socket.Scrivere(bri.getPlayerturno() + ";" + carte[0]);
                            }
                            try {
                                cominciaServer = false;
                                cartaDalClient = socket.leggere().split(";");
                                //CambiaImagini(Integer.parseInt(cartaDalClient[1]), cartaDalClient[0]);
                                jCarta2.setIcon(new ImageIcon("image/" + cartaDalClient[0]));
                                numlabel = Integer.parseInt(cartaDalClient[1]);
                                PuoiCliccare = true;
                            } catch (IOException ex) {
                            }
                        } else {
                            resetCarte(numlabel);
                            String[] carte = new String[2];
                            carte[0] = bri.DistribuisciUnaCarta();
                            carte[1] = bri.DistribuisciUnaCarta();
                            CambiaImagini(1, carte[0]);
                            if (carte[0].equals(ultima) || carte[1].equals(ultima)) {
                                jLabel8.setVisible(false);
                                jLabel7.setVisible(false);
                                ultimaMano = true;
                                socket.Scrivere(11 + ";" + carte[1]);
                            } else {
                                socket.Scrivere(bri.getPlayerturno() + ";" + carte[1]);
                            }
                            cominciaServer = true;
                            PuoiCliccare = true;
                        }
                    }
                }//
            } else {
                ultimeTreCarte--;
                if (cominciaServer == true) {
                    PuoiCliccare = false;
                    socket.Scrivere(jLabel1.getIcon().toString().split("/")[1] + ";4");
                    GiocareCarta(jLabel1, jLabel1.getIcon().toString().split("/")[1]);
                    try {
                        cartaDalClient = socket.leggere().split(";");
                    } catch (IOException ex) {
                    }
                    // CambiaImagini(Integer.parseInt(cartaDalClient[1]), cartaDalClient[0]);
                    jCarta2.setIcon(new ImageIcon("image/" + cartaDalClient[0]));
                    Invisibile(Integer.parseInt(cartaDalClient[1]));
                    numlabel = Integer.parseInt(cartaDalClient[1]);
                    bri.ConfrontoTradueCarte(new JCarta(jLabel1.getIcon().toString().split("/")[1]), new JCarta(cartaDalClient[0]));
                    JOptionPane.showMessageDialog(null, "Turnoo del Player:" + bri.getPlayerturno());
                    jLabel1.setVisible(true);
                    if (bri.getPlayerturno() == 2) {
                        resetCarte2(numlabel);
                        CambiaImagini(1, "");
                        socket.Scrivere(bri.getPlayerturno() + "");
                        if (ultimeTreCarte > 0) {
                            try {
                                cominciaServer = false;
                                cartaDalClient = socket.leggere().split(";");
                                jCarta2.setIcon(new ImageIcon("image/" + cartaDalClient[0]));
                                numlabel = Integer.parseInt(cartaDalClient[1]);

                            } catch (IOException ex) {
                            }
                        }
                        PuoiCliccare = true;
                    } else {
                        resetCarte2(numlabel);
                        CambiaImagini(1, "");
                        socket.Scrivere(bri.getPlayerturno() + "");
                        cominciaServer = true;
                        PuoiCliccare = true;
                    }
                } else {
                    PuoiCliccare = false;
                    socket.Scrivere(jLabel1.getIcon().toString().split("/")[1] + ";4");
                    GiocareCarta(jLabel1, jLabel1.getIcon().toString().split("/")[1]);
                    bri.ConfrontoTradueCarte(new JCarta(jLabel1.getIcon().toString().split("/")[1]), new JCarta(cartaDalClient[0]));
                    JOptionPane.showMessageDialog(null, "Turnoo del Player:" + bri.getPlayerturno());
                    jLabel1.setVisible(true);
                    if (bri.getPlayerturno() == 2) {
                        resetCarte2(numlabel);
                        CambiaImagini(1, "");
                        socket.Scrivere(bri.getPlayerturno() + "");
                        if (ultimeTreCarte > 0) {
                            try {
                                cominciaServer = false;
                                cartaDalClient = socket.leggere().split(";");
                                //CambiaImagini(Integer.parseInt(cartaDalClient[1]), cartaDalClient[0]);
                                jCarta2.setIcon(new ImageIcon("image/" + cartaDalClient[0]));
                                numlabel = Integer.parseInt(cartaDalClient[1]);
                            } catch (IOException ex) {
                            }
                        }
                        PuoiCliccare = true;
                    } else {
                        resetCarte2(numlabel);
                        CambiaImagini(1, "");
                        socket.Scrivere(bri.getPlayerturno() + "");
                        cominciaServer = true;
                        PuoiCliccare = true;
                    }

                }
                if (ultimeTreCarte == 0) {
                    int player = bri.Vincitore();
                    if (player == 1) {
                        socket.Scrivere("v");
                        JOptionPane.showMessageDialog(null, "Ha vintoo il Player 1");
                    } else if (player == 2) {
                        socket.Scrivere("s");
                        JOptionPane.showMessageDialog(null, "Ha vintoo il Player 2");
                    } else {
                        socket.Scrivere("p");
                        JOptionPane.showMessageDialog(null, "Avete pareggiatoo");
                    }
                }

            }
        }
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jLabel5MouseClicked

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jLabel6MouseClicked

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jLabel7MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            cartaDalClient = socket.leggere().split(";");
            //CambiaImagini(Integer.parseInt(cartaDalClient[1]), cartaDalClient[0]);
            jCarta2.setIcon(new ImageIcon("image/" + cartaDalClient[0]));
            Invisibile(Integer.parseInt(cartaDalClient[1]));
            numlabel = Integer.parseInt(cartaDalClient[1]);
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowOpened
    private void CambiaImagini(javax.swing.JLabel[] l) {
        l[0].setIcon(new ImageIcon("image/" + bri.DistribuisciUnaCarta()));
        l[1].setIcon(new ImageIcon("image/" + bri.DistribuisciUnaCarta()));
    }

    private void CambiaImagini(int l, String imag) {
        switch (l) {
            case 1:
                jLabel1.setIcon(new ImageIcon("image/" + imag));
                break;
            case 2:
                jLabel2.setIcon(new ImageIcon("image/" + imag));
                break;
            case 3:
                jLabel3.setIcon(new ImageIcon("image/" + imag));
                break;
            case 4:
                jLabel4.setIcon(new ImageIcon("image/" + imag));
                break;
            case 5:
                jLabel5.setIcon(new ImageIcon("image/" + imag));
                break;
            case 6:
                jLabel6.setIcon(new ImageIcon("image/" + imag));
                break;
            case 7:
                jLabel7.setIcon(new ImageIcon("image/" + imag));
                break;

        }

    }

    private static String CocanenareStringhe(String[] array) {
        String s = "";
        for (int i = 0; i < array.length; i++) {
            s += array[i];
            if (i < array.length - 1) {
                s += ";";
            }
        }
        return s;
    }

    private void Invisibile(int l) {
        switch (l) {
            case 1:
                jLabel1.setIcon(new ImageIcon(""));
                break;
            case 2:
                jLabel2.setIcon(new ImageIcon(""));
                break;
            case 3:
                jLabel3.setIcon(new ImageIcon(""));
                break;
            case 4:
                jLabel4.setIcon(new ImageIcon(""));
                break;
            case 5:
                jLabel5.setIcon(new ImageIcon(""));
                break;
            case 6:
                jLabel6.setIcon(new ImageIcon(""));
                break;
            case 7:
                jLabel7.setIcon(new ImageIcon(""));
                break;
            case 8:
                jCarta1.setVisible(false);
                break;
            case 9:
                jCarta2.setVisible(false);
                break;

        }
    }

    private synchronized void GiocareCarta(javax.swing.JLabel l, String image) {
        l.setVisible(false);
        jCarta1.setIcon(new ImageIcon("image/" + image));
    }

    private void resetCarte(int l) {

        switch (l) {
            case 4:
                jLabel4.setIcon(new ImageIcon("image/carta.png"));
                break;
            case 5:
                jLabel5.setIcon(new ImageIcon("image/carta.png"));
                break;
            case 6:
                jLabel6.setIcon(new ImageIcon("image/carta.png"));
                break;
            case 7:
                jLabel7.setIcon(new ImageIcon("image/carta.png"));
                break;
        }
        jCarta1.setIcon(new ImageIcon(""));
        jCarta2.setIcon(new ImageIcon(""));
    }

    private void resetCarte2(int l) {
        switch (l) {
            case 4:
                jLabel4.setIcon(new ImageIcon(" "));
                break;
            case 5:
                jLabel5.setIcon(new ImageIcon(" "));
                break;
            case 6:
                jLabel6.setIcon(new ImageIcon(" "));
                break;
            case 7:
                jLabel7.setIcon(new ImageIcon(" "));
                break;
        }
        jCarta1.setIcon(new ImageIcon(""));
        jCarta2.setIcon(new ImageIcon(""));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                try {
                    new NewJFrame().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jCarta1;
    private javax.swing.JLabel jCarta2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
